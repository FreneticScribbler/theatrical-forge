buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        maven { url "https://plugins.gradle.org/m2/" }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'com.wynprice.cursemaven:CurseMaven:1.2.+'
    }
}
configurations {
    shade
    compile.extendsFrom shade
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'com.wynprice.cursemaven'
apply plugin: 'java'
apply plugin: 'idea'

version = '0.6.2'
group = 'dev.imabad.theatrical' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'Theatrical-1.16.3'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
repositories {
    maven { url 'https://squiddev.cc/maven/' }
    maven { url 'https://repo.spongepowered.org/maven' }
    maven { // TOP
        name 'tterrag maven'
        url "http://maven.tterrag.com/"
    }
    maven {
        name 'BGC Maven'
        url 'https://maven.blamejared.com'
    }
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            include '**/**'
            //Add the generated resources
            srcDirs += "$rootDir/src/generated/resources"
            //But exclude the cache of the generated data from what gets built
            exclude '.cache'
        }
    }
}

minecraft {
    mappings channel: 'snapshot', version: '20200916-1.16.2'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    runs {
        client {
            workingDirectory project.file('run')
            source sourceSets.main
            property 'forge.logging.console.level', 'debug'
        }

        server {
            workingDirectory project.file('run')
            source sourceSets.main
            property 'forge.logging.console.level', 'debug'
        }

        data {
            workingDirectory project.file('run')
            source sourceSets.main
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'theatrical', '--all', '--output', file('src/generated/resources/')
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.3-34.1.22'

    shade files("libs/artnet4j-0.6.1.jar")
    runtimeOnly fg.deobf(curse.resolve('mcjtylib', '3049310'))
    runtimeOnly fg.deobf(curse.resolve('powah', '3098477'))
    runtimeOnly fg.deobf(curse.resolve('lollipop', '3084134'))
//    compile fg.deobf(files("libs/simplytech-I-HOpe-it-works.jar"))
    implementation fg.deobf("mcjty.theoneprobe:TheOneProbe-1.16:1.16-3.0.4-beta-7")
    compile fg.deobf("vazkii.patchouli:Patchouli:1.16.4-48")
    compile fg.deobf("xyz.brassgoggledcoders:PatchouliProvider:1.16.4-1.0.2-Snapshot.3")
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "theatrical",
            "Specification-Vendor": "theatrical",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"theatrical",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    configurations.shade.each { dep ->
        from(project.zipTree(dep)){
            exclude 'META-INF', 'META-INF/**'
        }
    }
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
